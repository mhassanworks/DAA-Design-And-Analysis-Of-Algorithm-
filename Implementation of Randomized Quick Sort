#include <iostream>
#include <cstdlib>  // for rand()
#include <ctime>    // for srand()

using namespace std;

// Function to swap two elements
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

// Function to partition the array and return the partition index
int partition(int arr[], int low, int high) {
    int pivot = arr[high];  // Pivot is chosen as the last element
    int i = low - 1;        // Index of smaller element
    
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Function to pick a random pivot and partition the array
int randomizedPartition(int arr[], int low, int high) {
    // Generate a random number between low and high
    int randomPivot = low + rand() % (high - low + 1);
    swap(arr[randomPivot], arr[high]);  // Swap random pivot with the last element
    return partition(arr, low, high);
}

// Function that implements randomized quicksort
void randomizedQuickSort(int arr[], int low, int high) {
    if (low < high) {
        // Partition the array with random pivot
        int pi = randomizedPartition(arr, low, high);

        // Recursively sort elements before and after partition
        randomizedQuickSort(arr, low, pi - 1);
        randomizedQuickSort(arr, pi + 1, high);
    }
}

// Utility function to print the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    srand(time(0));  // Seed for random number generator

    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array: ";
    printArray(arr, n);

    randomizedQuickSort(arr, 0, n - 1);

    cout << "Sorted array: ";
    printArray(arr, n);

    return 0;
}
